{
  "type": "module",
  "source": "doc/api/esm.md",
  "introduced_in": "v8.5.0",
  "meta": {
    "added": [
      "v8.5.0"
    ],
    "changes": [
      {
        "version": [
          "v14.17.0"
        ],
        "pr-url": "https://github.com/nodejs/node/pull/35781",
        "description": "Stabilize modules implementation."
      },
      {
        "version": [
          "v14.13.0"
        ],
        "pr-url": "https://github.com/nodejs/node/pull/35249",
        "description": "Support for detection of CommonJS named exports."
      },
      {
        "version": "v14.8.0",
        "pr-url": "https://github.com/nodejs/node/pull/34558",
        "description": "Unflag Top-Level Await."
      },
      {
        "version": [
          "v14.0.0",
          "v13.14.0"
        ],
        "pr-url": "https://github.com/nodejs/node/pull/31974",
        "description": "Remove experimental modules warning."
      },
      {
        "version": [
          "v13.2.0",
          "v12.17.0"
        ],
        "pr-url": "https://github.com/nodejs/node/pull/29866",
        "description": "Loading ECMAScript modules no longer requires a command-line flag."
      },
      {
        "version": "v12.0.0",
        "pr-url": "https://github.com/nodejs/node/pull/26745",
        "description": "Add support for ES modules using `.js` file extension via `package.json` `\"type\"` field."
      }
    ]
  },
  "stability": 2,
  "stabilityText": "Stable",
  "properties": [
    {
      "textRaw": "`meta` {Object}",
      "type": "Object",
      "name": "meta",
      "desc": "<p>The <code>import.meta</code> meta property is an <code>Object</code> that contains the following\nproperties.</p>",
      "properties": [
        {
          "textRaw": "`url` {string} The absolute `file:` URL of the module.",
          "type": "string",
          "name": "url",
          "desc": "<p>This is defined exactly the same as it is in browsers providing the URL of the\ncurrent module file.</p>\n<p>This enables useful patterns such as relative file loading:</p>\n<pre><code class=\"language-js\">import { readFileSync } from 'fs';\nconst buffer = readFileSync(new URL('./data.proto', import.meta.url));\n</code></pre>",
          "shortDesc": "The absolute `file:` URL of the module."
        }
      ],
      "methods": [
        {
          "textRaw": "`import.meta.resolve(specifier[, parent])`",
          "type": "method",
          "name": "resolve",
          "signatures": [
            {
              "params": []
            }
          ],
          "desc": "<!--\nadded:\n  - v13.9.0\n  - v12.16.2\nchanges:\n  - version: v14.18.0\n    pr-url: https://github.com/nodejs/node/pull/38587\n    description: Add support for WHATWG `URL` object to `parentURL` parameter.\n-->\n<blockquote>\n<p>Stability: 1 - Experimental</p>\n</blockquote>\n<p>This feature is only available with the <code>--experimental-import-meta-resolve</code>\ncommand flag enabled.</p>\n<ul>\n<li><code>specifier</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The module specifier to resolve relative to <code>parent</code>.</li>\n<li><code>parent</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The absolute parent module URL to resolve from. If none\nis specified, the value of <code>import.meta.url</code> is used as the default.</li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" class=\"type\">&lt;Promise&gt;</a></li>\n</ul>\n<p>Provides a module-relative resolution function scoped to each module, returning\nthe URL string.</p>\n<!-- eslint-skip -->\n<pre><code class=\"language-js\">const dependencyAsset = await import.meta.resolve('component-lib/asset.css');\n</code></pre>\n<p><code>import.meta.resolve</code> also accepts a second argument which is the parent module\nfrom which to resolve from:</p>\n<!-- eslint-skip -->\n<pre><code class=\"language-js\">await import.meta.resolve('./dep', import.meta.url);\n</code></pre>\n<p>This function is asynchronous because the ES module resolver in Node.js is\nallowed to be asynchronous.</p>"
        }
      ]
    }
  ],
  "miscs": [
    {
      "textRaw": "Modules: ECMAScript modules",
      "name": "Modules: ECMAScript modules",
      "introduced_in": "v8.5.0",
      "type": "misc",
      "meta": {
        "added": [
          "v8.5.0"
        ],
        "changes": [
          {
            "version": [
              "v14.17.0"
            ],
            "pr-url": "https://github.com/nodejs/node/pull/35781",
            "description": "Stabilize modules implementation."
          },
          {
            "version": [
              "v14.13.0"
            ],
            "pr-url": "https://github.com/nodejs/node/pull/35249",
            "description": "Support for detection of CommonJS named exports."
          },
          {
            "version": "v14.8.0",
            "pr-url": "https://github.com/nodejs/node/pull/34558",
            "description": "Unflag Top-Level Await."
          },
          {
            "version": [
              "v14.0.0",
              "v13.14.0"
            ],
            "pr-url": "https://github.com/nodejs/node/pull/31974",
            "description": "Remove experimental modules warning."
          },
          {
            "version": [
              "v13.2.0",
              "v12.17.0"
            ],
            "pr-url": "https://github.com/nodejs/node/pull/29866",
            "description": "Loading ECMAScript modules no longer requires a command-line flag."
          },
          {
            "version": "v12.0.0",
            "pr-url": "https://github.com/nodejs/node/pull/26745",
            "description": "Add support for ES modules using `.js` file extension via `package.json` `\"type\"` field."
          }
        ]
      },
      "stability": 2,
      "stabilityText": "Stable",
      "miscs": [
        {
          "textRaw": "Introduction",
          "name": "esm",
          "desc": "<p>ECMAScript modules are <a href=\"https://tc39.github.io/ecma262/#sec-modules\">the official standard format</a> to package JavaScript\ncode for reuse. Modules are defined using a variety of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\"><code>import</code></a> and\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export\"><code>export</code></a> statements.</p>\n<p>The following example of an ES module exports a function:</p>\n<pre><code class=\"language-js\">// addTwo.mjs\nfunction addTwo(num) {\n  return num + 2;\n}\n\nexport { addTwo };\n</code></pre>\n<p>The following example of an ES module imports the function from <code>addTwo.mjs</code>:</p>\n<pre><code class=\"language-js\">// app.mjs\nimport { addTwo } from './addTwo.mjs';\n\n// Prints: 6\nconsole.log(addTwo(4));\n</code></pre>\n<p>Node.js fully supports ECMAScript modules as they are currently specified and\nprovides interoperability between them and its original module format,\n<a href=\"modules.html\">CommonJS</a>.</p>\n<!-- Anchors to make sure old links find a target -->\n<p><i id=\"esm_package_json_type_field\"></i>\n<i id=\"esm_package_scope_and_file_extensions\"></i>\n<i id=\"esm_input_type_flag\"></i></p>",
          "type": "misc",
          "displayName": "esm"
        },
        {
          "textRaw": "Enabling",
          "name": "Enabling",
          "type": "misc",
          "desc": "<p>Node.js treats JavaScript code as CommonJS modules by default.\nAuthors can tell Node.js to treat JavaScript code as ECMAScript modules\nvia the <code>.mjs</code> file extension, the <code>package.json</code> <a href=\"packages.html#packages_type\"><code>\"type\"</code></a> field, or the\n<code>--input-type</code> flag. See\n<a href=\"packages.html#packages_determining_module_system\">Modules: Packages</a> for more\ndetails.</p>\n<!-- Anchors to make sure old links find a target -->\n<p><i id=\"esm_package_entry_points\"></i>\n<i id=\"esm_main_entry_point_export\"></i>\n<i id=\"esm_subpath_exports\"></i>\n<i id=\"esm_package_exports_fallbacks\"></i>\n<i id=\"esm_exports_sugar\"></i>\n<i id=\"esm_conditional_exports\"></i>\n<i id=\"esm_nested_conditions\"></i>\n<i id=\"esm_self_referencing_a_package_using_its_name\"></i>\n<i id=\"esm_internal_package_imports\"></i>\n<i id=\"esm_dual_commonjs_es_module_packages\"></i>\n<i id=\"esm_dual_package_hazard\"></i>\n<i id=\"esm_writing_dual_packages_while_avoiding_or_minimizing_hazards\"></i>\n<i id=\"esm_approach_1_use_an_es_module_wrapper\"></i>\n<i id=\"esm_approach_2_isolate_state\"></i></p>"
        },
        {
          "textRaw": "Packages",
          "name": "packages",
          "desc": "<p>This section was moved to <a href=\"packages.html\">Modules: Packages</a>.</p>",
          "type": "misc",
          "displayName": "Packages"
        },
        {
          "textRaw": "`import` Specifiers",
          "name": "`import`_specifiers",
          "modules": [
            {
              "textRaw": "Terminology",
              "name": "terminology",
              "desc": "<p>The <em>specifier</em> of an <code>import</code> statement is the string after the <code>from</code> keyword,\ne.g. <code>'path'</code> in <code>import { sep } from 'path'</code>. Specifiers are also used in\n<code>export from</code> statements, and as the argument to an <code>import()</code> expression.</p>\n<p>There are three types of specifiers:</p>\n<ul>\n<li>\n<p><em>Relative specifiers</em> like <code>'./startup.js'</code> or <code>'../config.mjs'</code>. They refer\nto a path relative to the location of the importing file. <em>The file extension\nis always necessary for these.</em></p>\n</li>\n<li>\n<p><em>Bare specifiers</em> like <code>'some-package'</code> or <code>'some-package/shuffle'</code>. They can\nrefer to the main entry point of a package by the package name, or a\nspecific feature module within a package prefixed by the package name as per\nthe examples respectively. <em>Including the file extension is only necessary\nfor packages without an <a href=\"packages.html#packages_exports\"><code>\"exports\"</code></a> field.</em></p>\n</li>\n<li>\n<p><em>Absolute specifiers</em> like <code>'file:///opt/nodejs/config.js'</code>. They refer\ndirectly and explicitly to a full path.</p>\n</li>\n</ul>\n<p>Bare specifier resolutions are handled by the <a href=\"#esm_resolver_algorithm_specification\">Node.js module resolution\nalgorithm</a>. All other specifier resolutions are always only resolved with\nthe standard relative <a href=\"https://url.spec.whatwg.org/\">URL</a> resolution semantics.</p>\n<p>Like in CommonJS, module files within packages can be accessed by appending a\npath to the package name unless the package’s <a href=\"packages.html#packages_node_js_package_json_field_definitions\"><code>package.json</code></a> contains an\n<a href=\"packages.html#packages_exports\"><code>\"exports\"</code></a> field, in which case files within packages can only be accessed\nvia the paths defined in <a href=\"packages.html#packages_exports\"><code>\"exports\"</code></a>.</p>\n<p>For details on these package resolution rules that apply to bare specifiers in\nthe Node.js module resolution, see the <a href=\"packages.html\">packages documentation</a>.</p>",
              "type": "module",
              "displayName": "Terminology"
            },
            {
              "textRaw": "Mandatory file extensions",
              "name": "mandatory_file_extensions",
              "desc": "<p>A file extension must be provided when using the <code>import</code> keyword to resolve\nrelative or absolute specifiers. Directory indexes (e.g. <code>'./startup/index.js'</code>)\nmust also be fully specified.</p>\n<p>This behavior matches how <code>import</code> behaves in browser environments, assuming a\ntypically configured server.</p>",
              "type": "module",
              "displayName": "Mandatory file extensions"
            },
            {
              "textRaw": "URLs",
              "name": "urls",
              "desc": "<p>ES modules are resolved and cached as URLs. This means that files containing\nspecial characters such as <code>#</code> and <code>?</code> need to be escaped.</p>\n<p><code>file:</code>, <code>node:</code>, and <code>data:</code> URL schemes are supported. A specifier like\n<code>'https://example.com/app.js'</code> is not supported natively in Node.js unless using\na <a href=\"#esm_https_loader\">custom HTTPS loader</a>.</p>",
              "modules": [
                {
                  "textRaw": "`file:` URLs",
                  "name": "`file:`_urls",
                  "desc": "<p>Modules are loaded multiple times if the <code>import</code> specifier used to resolve\nthem has a different query or fragment.</p>\n<pre><code class=\"language-js\">import './foo.mjs?query=1'; // loads ./foo.mjs with query of \"?query=1\"\nimport './foo.mjs?query=2'; // loads ./foo.mjs with query of \"?query=2\"\n</code></pre>\n<p>The volume root may be referenced via <code>/</code>, <code>//</code> or <code>file:///</code>. Given the\ndifferences between <a href=\"https://url.spec.whatwg.org/\">URL</a> and path resolution (such as percent encoding\ndetails), it is recommended to use <a href=\"url.html#url_url_pathtofileurl_path\">url.pathToFileURL</a> when importing a path.</p>",
                  "type": "module",
                  "displayName": "`file:` URLs"
                },
                {
                  "textRaw": "`data:` Imports",
                  "name": "`data:`_imports",
                  "meta": {
                    "added": [
                      "v12.10.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\"><code>data:</code> URLs</a> are supported for importing with the following MIME types:</p>\n<ul>\n<li><code>text/javascript</code> for ES Modules</li>\n<li><code>application/json</code> for JSON (requires <a href=\"cli.html#cli_experimental_json_modules\"><code>--experimental-json-modules</code></a> flag)</li>\n<li><code>application/wasm</code> for Wasm (requires <a href=\"cli.html#cli_experimental_wasm_modules\"><code>--experimental-wasm-modules</code></a> flag)</li>\n</ul>\n<p><code>data:</code> URLs only resolve <a href=\"#esm_terminology\"><em>Bare specifiers</em></a> for builtin modules\nand <a href=\"#esm_terminology\"><em>Absolute specifiers</em></a>. Resolving\n<a href=\"#esm_terminology\"><em>Relative specifiers</em></a> does not work because <code>data:</code> is not a\n<a href=\"https://url.spec.whatwg.org/#special-scheme\">special scheme</a>. For example, attempting to load <code>./foo</code>\nfrom <code>data:text/javascript,import \"./foo\";</code> fails to resolve because there\nis no concept of relative resolution for <code>data:</code> URLs. An example of a <code>data:</code>\nURLs being used is:</p>\n<pre><code class=\"language-js\">import 'data:text/javascript,console.log(\"hello!\");';\nimport _ from 'data:application/json,\"world!\"';\n</code></pre>",
                  "type": "module",
                  "displayName": "`data:` Imports"
                },
                {
                  "textRaw": "`node:` Imports",
                  "name": "`node:`_imports",
                  "meta": {
                    "added": [
                      "v14.13.1",
                      "v12.20.0"
                    ],
                    "changes": [
                      {
                        "version": "v14.18.0",
                        "pr-url": "https://github.com/nodejs/node/pull/37246",
                        "description": "Added `node:` import support to `require(...)`."
                      }
                    ]
                  },
                  "desc": "<p><code>node:</code> URLs are supported as an alternative means to load Node.js builtin\nmodules. This URL scheme allows for builtin modules to be referenced by valid\nabsolute URL strings.</p>\n<pre><code class=\"language-js\">import fs from 'node:fs/promises';\n</code></pre>",
                  "type": "module",
                  "displayName": "`node:` Imports"
                }
              ],
              "type": "module",
              "displayName": "URLs"
            }
          ],
          "type": "misc",
          "displayName": "`import` Specifiers"
        },
        {
          "textRaw": "Builtin modules",
          "name": "builtin_modules",
          "desc": "<p><a href=\"modules.html#modules_core_modules\">Core modules</a> provide named exports of their public API. A\ndefault export is also provided which is the value of the CommonJS exports.\nThe default export can be used for, among other things, modifying the named\nexports. Named exports of builtin modules are updated only by calling\n<a href=\"module.html#module_module_syncbuiltinesmexports\"><code>module.syncBuiltinESMExports()</code></a>.</p>\n<pre><code class=\"language-js\">import EventEmitter from 'events';\nconst e = new EventEmitter();\n</code></pre>\n<pre><code class=\"language-js\">import { readFile } from 'fs';\nreadFile('./foo.txt', (err, source) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(source);\n  }\n});\n</code></pre>\n<pre><code class=\"language-js\">import fs, { readFileSync } from 'fs';\nimport { syncBuiltinESMExports } from 'module';\n\nfs.readFileSync = () => Buffer.from('Hello, ESM');\nsyncBuiltinESMExports();\n\nfs.readFileSync === readFileSync;\n</code></pre>",
          "type": "misc",
          "displayName": "Builtin modules"
        },
        {
          "textRaw": "`import()` expressions",
          "name": "`import()`_expressions",
          "desc": "<p><a href=\"https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#Dynamic_Imports\">Dynamic <code>import()</code></a> is supported in both CommonJS and ES modules. In CommonJS\nmodules it can be used to load ES modules.</p>",
          "type": "misc",
          "displayName": "`import()` expressions"
        },
        {
          "textRaw": "Interoperability with CommonJS",
          "name": "interoperability_with_commonjs",
          "modules": [
            {
              "textRaw": "`import` statements",
              "name": "`import`_statements",
              "desc": "<p>An <code>import</code> statement can reference an ES module or a CommonJS module.\n<code>import</code> statements are permitted only in ES modules, but dynamic <a href=\"#esm_import_expressions\"><code>import()</code></a>\nexpressions are supported in CommonJS for loading ES modules.</p>\n<p>When importing <a href=\"#esm_commonjs_namespaces\">CommonJS modules</a>, the\n<code>module.exports</code> object is provided as the default export. Named exports may be\navailable, provided by static analysis as a convenience for better ecosystem\ncompatibility.</p>",
              "type": "module",
              "displayName": "`import` statements"
            },
            {
              "textRaw": "`require`",
              "name": "`require`",
              "desc": "<p>The CommonJS module <code>require</code> always treats the files it references as CommonJS.</p>\n<p>Using <code>require</code> to load an ES module is not supported because ES modules have\nasynchronous execution. Instead, use <a href=\"#esm_import_expressions\"><code>import()</code></a> to load an ES module\nfrom a CommonJS module.</p>",
              "type": "module",
              "displayName": "`require`"
            },
            {
              "textRaw": "CommonJS Namespaces",
              "name": "commonjs_namespaces",
              "desc": "<p>CommonJS modules consist of a <code>module.exports</code> object which can be of any type.</p>\n<p>When importing a CommonJS module, it can be reliably imported using the ES\nmodule default import or its corresponding sugar syntax:</p>\n<!-- eslint-disable no-duplicate-imports -->\n<pre><code class=\"language-js\">import { default as cjs } from 'cjs';\n\n// The following import statement is \"syntax sugar\" (equivalent but sweeter)\n// for `{ default as cjsSugar }` in the above import statement:\nimport cjsSugar from 'cjs';\n\nconsole.log(cjs);\nconsole.log(cjs === cjsSugar);\n// Prints:\n//   &#x3C;module.exports>\n//   true\n</code></pre>\n<p>The ECMAScript Module Namespace representation of a CommonJS module is always\na namespace with a <code>default</code> export key pointing to the CommonJS\n<code>module.exports</code> value.</p>\n<p>This Module Namespace Exotic Object can be directly observed either when using\n<code>import * as m from 'cjs'</code> or a dynamic import:</p>\n<!-- eslint-skip -->\n<pre><code class=\"language-js\">import * as m from 'cjs';\nconsole.log(m);\nconsole.log(m === await import('cjs'));\n// Prints:\n//   [Module] { default: &#x3C;module.exports> }\n//   true\n</code></pre>\n<p>For better compatibility with existing usage in the JS ecosystem, Node.js\nin addition attempts to determine the CommonJS named exports of every imported\nCommonJS module to provide them as separate ES module exports using a static\nanalysis process.</p>\n<p>For example, consider a CommonJS module written:</p>\n<pre><code class=\"language-cjs\">// cjs.cjs\nexports.name = 'exported';\n</code></pre>\n<p>The preceding module supports named imports in ES modules:</p>\n<!-- eslint-disable no-duplicate-imports -->\n<pre><code class=\"language-js\">import { name } from './cjs.cjs';\nconsole.log(name);\n// Prints: 'exported'\n\nimport cjs from './cjs.cjs';\nconsole.log(cjs);\n// Prints: { name: 'exported' }\n\nimport * as m from './cjs.cjs';\nconsole.log(m);\n// Prints: [Module] { default: { name: 'exported' }, name: 'exported' }\n</code></pre>\n<p>As can be seen from the last example of the Module Namespace Exotic Object being\nlogged, the <code>name</code> export is copied off of the <code>module.exports</code> object and set\ndirectly on the ES module namespace when the module is imported.</p>\n<p>Live binding updates or new exports added to <code>module.exports</code> are not detected\nfor these named exports.</p>\n<p>The detection of named exports is based on common syntax patterns but does not\nalways correctly detect named exports. In these cases, using the default\nimport form described above can be a better option.</p>\n<p>Named exports detection covers many common export patterns, reexport patterns\nand build tool and transpiler outputs. See <a href=\"https://github.com/guybedford/cjs-module-lexer/tree/1.2.2\">cjs-module-lexer</a> for the exact\nsemantics implemented.</p>",
              "type": "module",
              "displayName": "CommonJS Namespaces"
            },
            {
              "textRaw": "Differences between ES modules and CommonJS",
              "name": "differences_between_es_modules_and_commonjs",
              "modules": [
                {
                  "textRaw": "No `require`, `exports` or `module.exports`",
                  "name": "no_`require`,_`exports`_or_`module.exports`",
                  "desc": "<p>In most cases, the ES module <code>import</code> can be used to load CommonJS modules.</p>\n<p>If needed, a <code>require</code> function can be constructed within an ES module using\n<a href=\"module.html#module_module_createrequire_filename\"><code>module.createRequire()</code></a>.</p>",
                  "type": "module",
                  "displayName": "No `require`, `exports` or `module.exports`"
                },
                {
                  "textRaw": "No `__filename` or `__dirname`",
                  "name": "no_`__filename`_or_`__dirname`",
                  "desc": "<p>These CommonJS variables are not available in ES modules.</p>\n<p><code>__filename</code> and <code>__dirname</code> use cases can be replicated via\n<a href=\"#esm_import_meta_url\"><code>import.meta.url</code></a>.</p>",
                  "type": "module",
                  "displayName": "No `__filename` or `__dirname`"
                },
                {
                  "textRaw": "No JSON Module Loading",
                  "name": "no_json_module_loading",
                  "desc": "<p>JSON imports are still experimental and only supported via the\n<code>--experimental-json-modules</code> flag.</p>\n<p>Local JSON files can be loaded relative to <code>import.meta.url</code> with <code>fs</code> directly:</p>\n<!-- eslint-skip -->\n<pre><code class=\"language-js\">import { readFile } from 'fs/promises';\nconst json = JSON.parse(await readFile(new URL('./dat.json', import.meta.url)));\n</code></pre>\n<p>Alternatively <code>module.createRequire()</code> can be used.</p>",
                  "type": "module",
                  "displayName": "No JSON Module Loading"
                },
                {
                  "textRaw": "No Native Module Loading",
                  "name": "no_native_module_loading",
                  "desc": "<p>Native modules are not currently supported with ES module imports.</p>\n<p>They can instead be loaded with <a href=\"module.html#module_module_createrequire_filename\"><code>module.createRequire()</code></a> or\n<a href=\"process.html#process_process_dlopen_module_filename_flags\"><code>process.dlopen</code></a>.</p>",
                  "type": "module",
                  "displayName": "No Native Module Loading"
                },
                {
                  "textRaw": "No `require.resolve`",
                  "name": "no_`require.resolve`",
                  "desc": "<p>Relative resolution can be handled via <code>new URL('./local', import.meta.url)</code>.</p>\n<p>For a complete <code>require.resolve</code> replacement, there is a flagged experimental\n<a href=\"#esm_import_meta_resolve_specifier_parent\"><code>import.meta.resolve</code></a> API.</p>\n<p>Alternatively <code>module.createRequire()</code> can be used.</p>",
                  "type": "module",
                  "displayName": "No `require.resolve`"
                },
                {
                  "textRaw": "No `NODE_PATH`",
                  "name": "no_`node_path`",
                  "desc": "<p><code>NODE_PATH</code> is not part of resolving <code>import</code> specifiers. Please use symlinks\nif this behavior is desired.</p>",
                  "type": "module",
                  "displayName": "No `NODE_PATH`"
                },
                {
                  "textRaw": "No `require.extensions`",
                  "name": "no_`require.extensions`",
                  "desc": "<p><code>require.extensions</code> is not used by <code>import</code>. The expectation is that loader\nhooks can provide this workflow in the future.</p>",
                  "type": "module",
                  "displayName": "No `require.extensions`"
                },
                {
                  "textRaw": "No `require.cache`",
                  "name": "no_`require.cache`",
                  "desc": "<p><code>require.cache</code> is not used by <code>import</code> as the ES module loader has its own\nseparate cache.</p>\n<p><i id=\"esm_experimental_json_modules\"></i></p>",
                  "type": "module",
                  "displayName": "No `require.cache`"
                }
              ],
              "type": "module",
              "displayName": "Differences between ES modules and CommonJS"
            }
          ],
          "type": "misc",
          "displayName": "Interoperability with CommonJS"
        },
        {
          "textRaw": "JSON modules",
          "name": "json_modules",
          "stability": 1,
          "stabilityText": "Experimental",
          "desc": "<p>Currently importing JSON modules are only supported in the <code>commonjs</code> mode\nand are loaded using the CJS loader. <a href=\"https://html.spec.whatwg.org/#creating-a-json-module-script\">WHATWG JSON modules specification</a> are\nstill being standardized, and are experimentally supported by including the\nadditional flag <code>--experimental-json-modules</code> when running Node.js.</p>\n<p>When the <code>--experimental-json-modules</code> flag is included, both the\n<code>commonjs</code> and <code>module</code> mode use the new experimental JSON\nloader. The imported JSON only exposes a <code>default</code>. There is no\nsupport for named exports. A cache entry is created in the CommonJS\ncache to avoid duplication. The same object is returned in\nCommonJS if the JSON module has already been imported from the\nsame path.</p>\n<p>Assuming an <code>index.mjs</code> with</p>\n<!-- eslint-skip -->\n<pre><code class=\"language-js\">import packageConfig from './package.json';\n</code></pre>\n<p>The <code>--experimental-json-modules</code> flag is needed for the module\nto work.</p>\n<pre><code class=\"language-bash\">node index.mjs # fails\nnode --experimental-json-modules index.mjs # works\n</code></pre>\n<p><i id=\"esm_experimental_wasm_modules\"></i></p>",
          "type": "misc",
          "displayName": "JSON modules"
        },
        {
          "textRaw": "Wasm modules",
          "name": "wasm_modules",
          "stability": 1,
          "stabilityText": "Experimental",
          "desc": "<p>Importing Web Assembly modules is supported under the\n<code>--experimental-wasm-modules</code> flag, allowing any <code>.wasm</code> files to be\nimported as normal modules while also supporting their module imports.</p>\n<p>This integration is in line with the\n<a href=\"https://github.com/webassembly/esm-integration\">ES Module Integration Proposal for Web Assembly</a>.</p>\n<p>For example, an <code>index.mjs</code> containing:</p>\n<pre><code class=\"language-js\">import * as M from './module.wasm';\nconsole.log(M);\n</code></pre>\n<p>executed under:</p>\n<pre><code class=\"language-bash\">node --experimental-wasm-modules index.mjs\n</code></pre>\n<p>would provide the exports interface for the instantiation of <code>module.wasm</code>.</p>\n<p><i id=\"esm_experimental_top_level_await\"></i></p>",
          "type": "misc",
          "displayName": "Wasm modules"
        },
        {
          "textRaw": "Top-level `await`",
          "name": "top-level_`await`",
          "meta": {
            "added": [
              "v14.8.0"
            ],
            "changes": []
          },
          "stability": 1,
          "stabilityText": "Experimental",
          "desc": "<p>The <code>await</code> keyword may be used in the top level body of an ECMAScript module.</p>\n<p>Assuming an <code>a.mjs</code> with</p>\n<pre><code class=\"language-js\">export const five = await Promise.resolve(5);\n</code></pre>\n<p>And a <code>b.mjs</code> with</p>\n<pre><code class=\"language-js\">import { five } from './a.mjs';\n\nconsole.log(five); // Logs `5`\n</code></pre>\n<pre><code class=\"language-bash\">node b.mjs # works\n</code></pre>\n<p>If a top level <code>await</code> expression never resolves, the <code>node</code> process will exit\nwith a <code>13</code> <a href=\"process.html#process_exit_codes\">status code</a>.</p>\n<pre><code class=\"language-js\">import { spawn } from 'child_process';\nimport { execPath } from 'process';\n\nspawn(execPath, [\n  '--input-type=module',\n  '--eval',\n  // Never-resolving Promise:\n  'await new Promise(() => {})',\n]).once('exit', (code) => {\n  console.log(code); // Logs `13`\n});\n</code></pre>\n<p><i id=\"esm_experimental_loaders\"></i></p>",
          "type": "misc",
          "displayName": "Top-level `await`"
        },
        {
          "textRaw": "Loaders",
          "name": "Loaders",
          "stability": 1,
          "stabilityText": "Experimental",
          "type": "misc",
          "desc": "<p><strong>Note: This API is currently being redesigned and will still change.</strong></p>\n<p>To customize the default module resolution, loader hooks can optionally be\nprovided via a <code>--experimental-loader ./loader-name.mjs</code> argument to Node.js.</p>\n<p>When hooks are used they only apply to ES module loading and not to any\nCommonJS modules loaded.</p>",
          "miscs": [
            {
              "textRaw": "Hooks",
              "name": "hooks",
              "methods": [
                {
                  "textRaw": "`resolve(specifier, context, defaultResolve)`",
                  "type": "method",
                  "name": "resolve",
                  "signatures": [
                    {
                      "params": []
                    }
                  ],
                  "desc": "<blockquote>\n<p>Note: The loaders API is being redesigned. This hook may disappear or its\nsignature may change. Do not rely on the API described below.</p>\n</blockquote>\n<ul>\n<li><code>specifier</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n<li><code>context</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n<ul>\n<li><code>conditions</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string[]&gt;</a></li>\n<li><code>parentURL</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n</ul>\n</li>\n<li><code>defaultResolve</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n<ul>\n<li><code>url</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n</ul>\n</li>\n</ul>\n<p>The <code>resolve</code> hook returns the resolved file URL for a given module specifier\nand parent URL. The module specifier is the string in an <code>import</code> statement or\n<code>import()</code> expression, and the parent URL is the URL of the module that imported\nthis one, or <code>undefined</code> if this is the main entry point for the application.</p>\n<p>The <code>conditions</code> property on the <code>context</code> is an array of conditions for\n<a href=\"packages.html#packages_conditional_exports\">Conditional exports</a> that apply to this resolution request. They can be used\nfor looking up conditional mappings elsewhere or to modify the list when calling\nthe default resolution logic.</p>\n<p>The current <a href=\"packages.html#packages_conditional_exports\">package exports conditions</a> are always in\nthe <code>context.conditions</code> array passed into the hook. To guarantee <em>default\nNode.js module specifier resolution behavior</em> when calling <code>defaultResolve</code>, the\n<code>context.conditions</code> array passed to it <em>must</em> include <em>all</em> elements of the\n<code>context.conditions</code> array originally passed into the <code>resolve</code> hook.</p>\n<pre><code class=\"language-js\">/**\n * @param {string} specifier\n * @param {{\n *   conditions: !Array&#x3C;string>,\n *   parentURL: !(string | undefined),\n * }} context\n * @param {Function} defaultResolve\n * @returns {Promise&#x3C;{ url: string }>}\n */\nexport async function resolve(specifier, context, defaultResolve) {\n  const { parentURL = null } = context;\n  if (Math.random() > 0.5) { // Some condition.\n    // For some or all specifiers, do some custom logic for resolving.\n    // Always return an object of the form {url: &#x3C;string>}.\n    return {\n      url: parentURL ?\n        new URL(specifier, parentURL).href :\n        new URL(specifier).href,\n    };\n  }\n  if (Math.random() &#x3C; 0.5) { // Another condition.\n    // When calling `defaultResolve`, the arguments can be modified. In this\n    // case it's adding another value for matching conditional exports.\n    return defaultResolve(specifier, {\n      ...context,\n      conditions: [...context.conditions, 'another-condition'],\n    });\n  }\n  // Defer to Node.js for all other specifiers.\n  return defaultResolve(specifier, context, defaultResolve);\n}\n</code></pre>"
                },
                {
                  "textRaw": "`getFormat(url, context, defaultGetFormat)`",
                  "type": "method",
                  "name": "getFormat",
                  "signatures": [
                    {
                      "params": []
                    }
                  ],
                  "desc": "<blockquote>\n<p>Note: The loaders API is being redesigned. This hook may disappear or its\nsignature may change. Do not rely on the API described below.</p>\n</blockquote>\n<ul>\n<li><code>url</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n<li><code>context</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a></li>\n<li><code>defaultGetFormat</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n<ul>\n<li><code>format</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n</ul>\n</li>\n</ul>\n<p>The <code>getFormat</code> hook provides a way to define a custom method of determining how\na URL should be interpreted. The <code>format</code> returned also affects what the\nacceptable forms of source values are for a module when parsing. This can be one\nof the following:</p>\n<table>\n<thead>\n<tr>\n<th><code>format</code></th>\n<th>Description</th>\n<th>Acceptable Types For <code>source</code> Returned by <code>getSource</code> or <code>transformSource</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>'builtin'</code></td>\n<td>Load a Node.js builtin module</td>\n<td>Not applicable</td>\n</tr>\n<tr>\n<td><code>'commonjs'</code></td>\n<td>Load a Node.js CommonJS module</td>\n<td>Not applicable</td>\n</tr>\n<tr>\n<td><code>'json'</code></td>\n<td>Load a JSON file</td>\n<td>{ <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>string</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> }</td>\n</tr>\n<tr>\n<td><code>'module'</code></td>\n<td>Load an ES module</td>\n<td>{ <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\"><code>string</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> }</td>\n</tr>\n<tr>\n<td><code>'wasm'</code></td>\n<td>Load a WebAssembly module</td>\n<td>{ <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> }</td>\n</tr>\n</tbody>\n</table>\n<p>Note: These types all correspond to classes defined in ECMAScript.</p>\n<ul>\n<li>The specific <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> object is a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a>.</li>\n<li>The specific <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> object is a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>.</li>\n</ul>\n<p>Note: If the source value of a text-based format (i.e., <code>'json'</code>, <code>'module'</code>) is\nnot a string, it is converted to a string using <a href=\"util.html#util_class_util_textdecoder\"><code>util.TextDecoder</code></a>.</p>\n<pre><code class=\"language-js\">/**\n * @param {string} url\n * @param {Object} context (currently empty)\n * @param {Function} defaultGetFormat\n * @returns {Promise&#x3C;{ format: string }>}\n */\nexport async function getFormat(url, context, defaultGetFormat) {\n  if (Math.random() > 0.5) { // Some condition.\n    // For some or all URLs, do some custom logic for determining format.\n    // Always return an object of the form {format: &#x3C;string>}, where the\n    // format is one of the strings in the preceding table.\n    return {\n      format: 'module',\n    };\n  }\n  // Defer to Node.js for all other URLs.\n  return defaultGetFormat(url, context, defaultGetFormat);\n}\n</code></pre>"
                },
                {
                  "textRaw": "`getSource(url, context, defaultGetSource)`",
                  "type": "method",
                  "name": "getSource",
                  "signatures": [
                    {
                      "params": []
                    }
                  ],
                  "desc": "<blockquote>\n<p>Note: The loaders API is being redesigned. This hook may disappear or its\nsignature may change. Do not rely on the API described below.</p>\n</blockquote>\n<ul>\n<li><code>url</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n<li><code>context</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n<ul>\n<li><code>format</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n</ul>\n</li>\n<li><code>defaultGetSource</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" class=\"type\">&lt;Function&gt;</a></li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n<ul>\n<li><code>source</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\" class=\"type\">&lt;SharedArrayBuffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\" class=\"type\">&lt;Uint8Array&gt;</a></li>\n</ul>\n</li>\n</ul>\n<p>The <code>getSource</code> hook provides a way to define a custom method for retrieving\nthe source code of an ES module specifier. This would allow a loader to\npotentially avoid reading files from disk.</p>\n<pre><code class=\"language-js\">/**\n * @param {string} url\n * @param {{ format: string }} context\n * @param {Function} defaultGetSource\n * @returns {Promise&#x3C;{ source: !(string | SharedArrayBuffer | Uint8Array) }>}\n */\nexport async function getSource(url, context, defaultGetSource) {\n  const { format } = context;\n  if (Math.random() > 0.5) { // Some condition.\n    // For some or all URLs, do some custom logic for retrieving the source.\n    // Always return an object of the form {source: &#x3C;string|buffer>}.\n    return {\n      source: '...',\n    };\n  }\n  // Defer to Node.js for all other URLs.\n  return defaultGetSource(url, context, defaultGetSource);\n}\n</code></pre>"
                },
                {
                  "textRaw": "`transformSource(source, context, defaultTransformSource)`",
                  "type": "method",
                  "name": "transformSource",
                  "signatures": [
                    {
                      "params": []
                    }
                  ],
                  "desc": "<blockquote>\n<p>Note: The loaders API is being redesigned. This hook may disappear or its\nsignature may change. Do not rely on the API described below.</p>\n</blockquote>\n<ul>\n<li><code>source</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\" class=\"type\">&lt;SharedArrayBuffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\" class=\"type\">&lt;Uint8Array&gt;</a></li>\n<li><code>context</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n<ul>\n<li><code>format</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n<li><code>url</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n</ul>\n</li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" class=\"type\">&lt;Object&gt;</a>\n<ul>\n<li><code>source</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\" class=\"type\">&lt;SharedArrayBuffer&gt;</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\" class=\"type\">&lt;Uint8Array&gt;</a></li>\n</ul>\n</li>\n</ul>\n<p>The <code>transformSource</code> hook provides a way to modify the source code of a loaded\nES module file after the source string has been loaded but before Node.js has\ndone anything with it.</p>\n<p>If this hook is used to convert unknown-to-Node.js file types into executable\nJavaScript, a resolve hook is also necessary in order to register any\nunknown-to-Node.js file extensions. See the <a href=\"#esm_transpiler_loader\">transpiler loader example</a> below.</p>\n<pre><code class=\"language-js\">/**\n * @param {!(string | SharedArrayBuffer | Uint8Array)} source\n * @param {{\n *   format: string,\n *   url: string,\n * }} context\n * @param {Function} defaultTransformSource\n * @returns {Promise&#x3C;{ source: !(string | SharedArrayBuffer | Uint8Array) }>}\n */\nexport async function transformSource(source, context, defaultTransformSource) {\n  const { url, format } = context;\n  if (Math.random() > 0.5) { // Some condition.\n    // For some or all URLs, do some custom logic for modifying the source.\n    // Always return an object of the form {source: &#x3C;string|buffer>}.\n    return {\n      source: '...',\n    };\n  }\n  // Defer to Node.js for all other sources.\n  return defaultTransformSource(source, context, defaultTransformSource);\n}\n</code></pre>"
                },
                {
                  "textRaw": "`getGlobalPreloadCode()`",
                  "type": "method",
                  "name": "getGlobalPreloadCode",
                  "signatures": [
                    {
                      "params": []
                    }
                  ],
                  "desc": "<blockquote>\n<p>Note: The loaders API is being redesigned. This hook may disappear or its\nsignature may change. Do not rely on the API described below.</p>\n</blockquote>\n<ul>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a></li>\n</ul>\n<p>Sometimes it might be necessary to run some code inside of the same global scope\nthat the application runs in. This hook allows the return of a string that is\nrun as sloppy-mode script on startup.</p>\n<p>Similar to how CommonJS wrappers work, the code runs in an implicit function\nscope. The only argument is a <code>require</code>-like function that can be used to load\nbuiltins like \"fs\": <code>getBuiltin(request: string)</code>.</p>\n<p>If the code needs more advanced <code>require</code> features, it has to construct\nits own <code>require</code> using  <code>module.createRequire()</code>.</p>\n<pre><code class=\"language-js\">/**\n * @returns {string} Code to run before application startup\n */\nexport function getGlobalPreloadCode() {\n  return `\\\nglobalThis.someInjectedProperty = 42;\nconsole.log('I just set some globals!');\n\nconst { createRequire } = getBuiltin('module');\n\nconst require = createRequire(process.cwd() + '/&#x3C;preload>');\n// [...]\n`;\n}\n</code></pre>\n<h3>Examples</h3>\n<p>The various loader hooks can be used together to accomplish wide-ranging\ncustomizations of Node.js’ code loading and evaluation behaviors.</p>"
                }
              ],
              "modules": [
                {
                  "textRaw": "HTTPS loader",
                  "name": "https_loader",
                  "desc": "<p>In current Node.js, specifiers starting with <code>https://</code> are unsupported. The\nloader below registers hooks to enable rudimentary support for such specifiers.\nWhile this may seem like a significant improvement to Node.js core\nfunctionality, there are substantial downsides to actually using this loader:\nperformance is much slower than loading files from disk, there is no caching,\nand there is no security.</p>\n<pre><code class=\"language-js\">// https-loader.mjs\nimport { get } from 'https';\n\nexport function resolve(specifier, context, defaultResolve) {\n  const { parentURL = null } = context;\n\n  // Normally Node.js would error on specifiers starting with 'https://', so\n  // this hook intercepts them and converts them into absolute URLs to be\n  // passed along to the later hooks below.\n  if (specifier.startsWith('https://')) {\n    return {\n      url: specifier\n    };\n  } else if (parentURL &#x26;&#x26; parentURL.startsWith('https://')) {\n    return {\n      url: new URL(specifier, parentURL).href\n    };\n  }\n\n  // Let Node.js handle all other specifiers.\n  return defaultResolve(specifier, context, defaultResolve);\n}\n\nexport function getFormat(url, context, defaultGetFormat) {\n  // This loader assumes all network-provided JavaScript is ES module code.\n  if (url.startsWith('https://')) {\n    return {\n      format: 'module'\n    };\n  }\n\n  // Let Node.js handle all other URLs.\n  return defaultGetFormat(url, context, defaultGetFormat);\n}\n\nexport function getSource(url, context, defaultGetSource) {\n  // For JavaScript to be loaded over the network, we need to fetch and\n  // return it.\n  if (url.startsWith('https://')) {\n    return new Promise((resolve, reject) => {\n      get(url, (res) => {\n        let data = '';\n        res.on('data', (chunk) => data += chunk);\n        res.on('end', () => resolve({ source: data }));\n      }).on('error', (err) => reject(err));\n    });\n  }\n\n  // Let Node.js handle all other URLs.\n  return defaultGetSource(url, context, defaultGetSource);\n}\n</code></pre>\n<pre><code class=\"language-js\">// main.mjs\nimport { VERSION } from 'https://coffeescript.org/browser-compiler-modern/coffeescript.js';\n\nconsole.log(VERSION);\n</code></pre>\n<p>With the preceding loader, running\n<code>node --experimental-loader ./https-loader.mjs ./main.mjs</code>\nprints the current version of CoffeeScript per the module at the URL in\n<code>main.mjs</code>.</p>",
                  "type": "module",
                  "displayName": "HTTPS loader"
                },
                {
                  "textRaw": "Transpiler loader",
                  "name": "transpiler_loader",
                  "desc": "<p>Sources that are in formats Node.js doesn’t understand can be converted into\nJavaScript using the <a href=\"#esm_transformsource_source_context_defaulttransformsource\"><code>transformSource</code> hook</a>. Before that hook gets called,\nhowever, other hooks need to tell Node.js not to throw an error on unknown file\ntypes; and to tell Node.js how to load this new file type.</p>\n<p>This is less performant than transpiling source files before running\nNode.js; a transpiler loader should only be used for development and testing\npurposes.</p>\n<pre><code class=\"language-js\">// coffeescript-loader.mjs\nimport { URL, pathToFileURL } from 'url';\nimport CoffeeScript from 'coffeescript';\n\nconst baseURL = pathToFileURL(`${process.cwd()}/`).href;\n\n// CoffeeScript files end in .coffee, .litcoffee or .coffee.md.\nconst extensionsRegex = /\\.coffee$|\\.litcoffee$|\\.coffee\\.md$/;\n\nexport function resolve(specifier, context, defaultResolve) {\n  const { parentURL = baseURL } = context;\n\n  // Node.js normally errors on unknown file extensions, so return a URL for\n  // specifiers ending in the CoffeeScript file extensions.\n  if (extensionsRegex.test(specifier)) {\n    return {\n      url: new URL(specifier, parentURL).href\n    };\n  }\n\n  // Let Node.js handle all other specifiers.\n  return defaultResolve(specifier, context, defaultResolve);\n}\n\nexport function getFormat(url, context, defaultGetFormat) {\n  // Now that we patched resolve to let CoffeeScript URLs through, we need to\n  // tell Node.js what format such URLs should be interpreted as. For the\n  // purposes of this loader, all CoffeeScript URLs are ES modules.\n  if (extensionsRegex.test(url)) {\n    return {\n      format: 'module'\n    };\n  }\n\n  // Let Node.js handle all other URLs.\n  return defaultGetFormat(url, context, defaultGetFormat);\n}\n\nexport function transformSource(source, context, defaultTransformSource) {\n  const { url, format } = context;\n\n  if (extensionsRegex.test(url)) {\n    return {\n      source: CoffeeScript.compile(source, { bare: true })\n    };\n  }\n\n  // Let Node.js handle all other sources.\n  return defaultTransformSource(source, context, defaultTransformSource);\n}\n</code></pre>\n<pre><code class=\"language-coffee\"># main.coffee\nimport { scream } from './scream.coffee'\nconsole.log scream 'hello, world'\n\nimport { version } from 'process'\nconsole.log \"Brought to you by Node.js version #{version}\"\n</code></pre>\n<pre><code class=\"language-coffee\"># scream.coffee\nexport scream = (str) -> str.toUpperCase()\n</code></pre>\n<p>With the preceding loader, running\n<code>node --experimental-loader ./coffeescript-loader.mjs main.coffee</code>\ncauses <code>main.coffee</code> to be turned into JavaScript after its source code is\nloaded from disk but before Node.js executes it; and so on for any <code>.coffee</code>,\n<code>.litcoffee</code> or <code>.coffee.md</code> files referenced via <code>import</code> statements of any\nloaded file.</p>",
                  "type": "module",
                  "displayName": "Transpiler loader"
                }
              ],
              "type": "misc",
              "displayName": "Hooks"
            }
          ]
        },
        {
          "textRaw": "Resolution algorithm",
          "name": "resolution_algorithm",
          "modules": [
            {
              "textRaw": "Features",
              "name": "features",
              "desc": "<p>The resolver has the following properties:</p>\n<ul>\n<li>FileURL-based resolution as is used by ES modules</li>\n<li>Support for builtin module loading</li>\n<li>Relative and absolute URL resolution</li>\n<li>No default extensions</li>\n<li>No folder mains</li>\n<li>Bare specifier package resolution lookup through node_modules</li>\n</ul>",
              "type": "module",
              "displayName": "Features"
            },
            {
              "textRaw": "Resolver algorithm",
              "name": "resolver_algorithm",
              "desc": "<p>The algorithm to load an ES module specifier is given through the\n<strong>ESM_RESOLVE</strong> method below. It returns the resolved URL for a\nmodule specifier relative to a parentURL.</p>\n<p>The algorithm to determine the module format of a resolved URL is\nprovided by <strong>ESM_FORMAT</strong>, which returns the unique module\nformat for any file. The <em>\"module\"</em> format is returned for an ECMAScript\nModule, while the <em>\"commonjs\"</em> format is used to indicate loading through the\nlegacy CommonJS loader. Additional formats such as <em>\"addon\"</em> can be extended in\nfuture updates.</p>\n<p>In the following algorithms, all subroutine errors are propagated as errors\nof these top-level routines unless stated otherwise.</p>\n<p><em>defaultConditions</em> is the conditional environment name array,\n<code>[\"node\", \"import\"]</code>.</p>\n<p>The resolver can throw the following errors:</p>\n<ul>\n<li><em>Invalid Module Specifier</em>: Module specifier is an invalid URL, package name\nor package subpath specifier.</li>\n<li><em>Invalid Package Configuration</em>: package.json configuration is invalid or\ncontains an invalid configuration.</li>\n<li><em>Invalid Package Target</em>: Package exports or imports define a target module\nfor the package that is an invalid type or string target.</li>\n<li><em>Package Path Not Exported</em>: Package exports do not define or permit a target\nsubpath in the package for the given module.</li>\n<li><em>Package Import Not Defined</em>: Package imports do not define the specifier.</li>\n<li><em>Module Not Found</em>: The package or module requested does not exist.</li>\n<li><em>Unsupported Directory Import</em>: The resolved path corresponds to a directory,\nwhich is not a supported target for module imports.</li>\n</ul>",
              "type": "module",
              "displayName": "Resolver algorithm"
            },
            {
              "textRaw": "Resolver Algorithm Specification",
              "name": "resolver_algorithm_specification",
              "desc": "<p><strong>ESM_RESOLVE</strong>(<em>specifier</em>, <em>parentURL</em>)</p>\n<blockquote>\n<ol>\n<li>Let <em>resolved</em> be <strong>undefined</strong>.</li>\n<li>If <em>specifier</em> is a valid URL, then\n<ol>\n<li>Set <em>resolved</em> to the result of parsing and reserializing\n<em>specifier</em> as a URL.</li>\n</ol>\n</li>\n<li>Otherwise, if <em>specifier</em> starts with <em>\"/\"</em>, <em>\"./\"</em> or <em>\"../\"</em>, then\n<ol>\n<li>Set <em>resolved</em> to the URL resolution of <em>specifier</em> relative to\n<em>parentURL</em>.</li>\n</ol>\n</li>\n<li>Otherwise, if <em>specifier</em> starts with <em>\"#\"</em>, then\n<ol>\n<li>Set <em>resolved</em> to the destructured value of the result of\n<strong>PACKAGE_IMPORTS_RESOLVE</strong>(<em>specifier</em>, <em>parentURL</em>,\n<em>defaultConditions</em>).</li>\n</ol>\n</li>\n<li>Otherwise,\n<ol>\n<li>Note: <em>specifier</em> is now a bare specifier.</li>\n<li>Set <em>resolved</em> the result of\n<strong>PACKAGE_RESOLVE</strong>(<em>specifier</em>, <em>parentURL</em>).</li>\n</ol>\n</li>\n<li>If <em>resolved</em> contains any percent encodings of <em>\"/\"</em> or <em>\"\\\"</em> (<em>\"%2f\"</em>\nand <em>\"%5C\"</em> respectively), then\n<ol>\n<li>Throw an <em>Invalid Module Specifier</em> error.</li>\n</ol>\n</li>\n<li>If the file at <em>resolved</em> is a directory, then\n<ol>\n<li>Throw an <em>Unsupported Directory Import</em> error.</li>\n</ol>\n</li>\n<li>If the file at <em>resolved</em> does not exist, then\n<ol>\n<li>Throw a <em>Module Not Found</em> error.</li>\n</ol>\n</li>\n<li>Set <em>resolved</em> to the real path of <em>resolved</em>.</li>\n<li>Let <em>format</em> be the result of <strong>ESM_FORMAT</strong>(<em>resolved</em>).</li>\n<li>Load <em>resolved</em> as module format, <em>format</em>.</li>\n<li>Return <em>resolved</em>.</li>\n</ol>\n</blockquote>\n<p><strong>PACKAGE_RESOLVE</strong>(<em>packageSpecifier</em>, <em>parentURL</em>)</p>\n<blockquote>\n<ol>\n<li>Let <em>packageName</em> be <strong>undefined</strong>.</li>\n<li>If <em>packageSpecifier</em> is an empty string, then\n<ol>\n<li>Throw an <em>Invalid Module Specifier</em> error.</li>\n</ol>\n</li>\n<li>If <em>packageSpecifier</em> does not start with <em>\"@\"</em>, then\n<ol>\n<li>Set <em>packageName</em> to the substring of <em>packageSpecifier</em> until the first\n<em>\"/\"</em> separator or the end of the string.</li>\n</ol>\n</li>\n<li>Otherwise,\n<ol>\n<li>If <em>packageSpecifier</em> does not contain a <em>\"/\"</em> separator, then\n<ol>\n<li>Throw an <em>Invalid Module Specifier</em> error.</li>\n</ol>\n</li>\n<li>Set <em>packageName</em> to the substring of <em>packageSpecifier</em>\nuntil the second <em>\"/\"</em> separator or the end of the string.</li>\n</ol>\n</li>\n<li>If <em>packageName</em> starts with <em>\".\"</em> or contains <em>\"\\\"</em> or <em>\"%\"</em>, then\n<ol>\n<li>Throw an <em>Invalid Module Specifier</em> error.</li>\n</ol>\n</li>\n<li>Let <em>packageSubpath</em> be <em>\".\"</em> concatenated with the substring of\n<em>packageSpecifier</em> from the position at the length of <em>packageName</em>.</li>\n<li>Let <em>selfUrl</em> be the result of\n<strong>PACKAGE_SELF_RESOLVE</strong>(<em>packageName</em>, <em>packageSubpath</em>, <em>parentURL</em>).</li>\n<li>If <em>selfUrl</em> is not <strong>undefined</strong>, return <em>selfUrl</em>.</li>\n<li>If <em>packageSubpath</em> is <em>\".\"</em> and <em>packageName</em> is a Node.js builtin\nmodule, then\n<ol>\n<li>Return the string <em>\"node:\"</em> concatenated with <em>packageSpecifier</em>.</li>\n</ol>\n</li>\n<li>While <em>parentURL</em> is not the file system root,\n<ol>\n<li>Let <em>packageURL</em> be the URL resolution of <em>\"node_modules/\"</em>\nconcatenated with <em>packageSpecifier</em>, relative to <em>parentURL</em>.</li>\n<li>Set <em>parentURL</em> to the parent folder URL of <em>parentURL</em>.</li>\n<li>If the folder at <em>packageURL</em> does not exist, then\n<ol>\n<li>Set <em>parentURL</em> to the parent URL path of <em>parentURL</em>.</li>\n<li>Continue the next loop iteration.</li>\n</ol>\n</li>\n<li>Let <em>pjson</em> be the result of <strong>READ_PACKAGE_JSON</strong>(<em>packageURL</em>).</li>\n<li>If <em>pjson</em> is not <strong>null</strong> and <em>pjson</em>.<em>exports</em> is not <strong>null</strong> or\n<strong>undefined</strong>, then\n<ol>\n<li>Let <em>exports</em> be <em>pjson.exports</em>.</li>\n<li>Return the <em>resolved</em> destructured value of the result of\n<strong>PACKAGE_EXPORTS_RESOLVE</strong>(<em>packageURL</em>, <em>packageSubpath</em>,\n<em>pjson.exports</em>, <em>defaultConditions</em>).</li>\n</ol>\n</li>\n<li>Otherwise, if <em>packageSubpath</em> is equal to <em>\".\"</em>, then\n<ol>\n<li>Return the result applying the legacy <strong>LOAD_AS_DIRECTORY</strong>\nCommonJS resolver to <em>packageURL</em>, throwing a <em>Module Not Found</em>\nerror for no resolution.</li>\n</ol>\n</li>\n<li>Otherwise,\n<ol>\n<li>Return the URL resolution of <em>packageSubpath</em> in <em>packageURL</em>.</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>Throw a <em>Module Not Found</em> error.</li>\n</ol>\n</blockquote>\n<p><strong>PACKAGE_SELF_RESOLVE</strong>(<em>packageName</em>, <em>packageSubpath</em>, <em>parentURL</em>)</p>\n<blockquote>\n<ol>\n<li>Let <em>packageURL</em> be the result of <strong>READ_PACKAGE_SCOPE</strong>(<em>parentURL</em>).</li>\n<li>If <em>packageURL</em> is <strong>null</strong>, then\n<ol>\n<li>Return <strong>undefined</strong>.</li>\n</ol>\n</li>\n<li>Let <em>pjson</em> be the result of <strong>READ_PACKAGE_JSON</strong>(<em>packageURL</em>).</li>\n<li>If <em>pjson</em> is <strong>null</strong> or if <em>pjson</em>.<em>exports</em> is <strong>null</strong> or\n<strong>undefined</strong>, then\n<ol>\n<li>Return <strong>undefined</strong>.</li>\n</ol>\n</li>\n<li>If <em>pjson.name</em> is equal to <em>packageName</em>, then\n<ol>\n<li>Return the <em>resolved</em> destructured value of the result of\n<strong>PACKAGE_EXPORTS_RESOLVE</strong>(<em>packageURL</em>, <em>subpath</em>, <em>pjson.exports</em>,\n<em>defaultConditions</em>).</li>\n</ol>\n</li>\n<li>Otherwise, return <strong>undefined</strong>.</li>\n</ol>\n</blockquote>\n<p><strong>PACKAGE_EXPORTS_RESOLVE</strong>(<em>packageURL</em>, <em>subpath</em>, <em>exports</em>, <em>conditions</em>)</p>\n<blockquote>\n<ol>\n<li>If <em>exports</em> is an Object with both a key starting with <em>\".\"</em> and a key not\nstarting with <em>\".\"</em>, throw an <em>Invalid Package Configuration</em> error.</li>\n<li>If <em>subpath</em> is equal to <em>\".\"</em>, then\n<ol>\n<li>Let <em>mainExport</em> be <strong>undefined</strong>.</li>\n<li>If <em>exports</em> is a String or Array, or an Object containing no keys\nstarting with <em>\".\"</em>, then\n<ol>\n<li>Set <em>mainExport</em> to <em>exports</em>.</li>\n</ol>\n</li>\n<li>Otherwise if <em>exports</em> is an Object containing a <em>\".\"</em> property, then\n<ol>\n<li>Set <em>mainExport</em> to <em>exports</em>[<em>\".\"</em>].</li>\n</ol>\n</li>\n<li>If <em>mainExport</em> is not <strong>undefined</strong>, then\n<ol>\n<li>Let <em>resolved</em> be the result of <strong>PACKAGE_TARGET_RESOLVE</strong>(\n<em>packageURL</em>, <em>mainExport</em>, <em>\"\"</em>, <strong>false</strong>, <strong>false</strong>,\n<em>conditions</em>).</li>\n<li>If <em>resolved</em> is not <strong>null</strong> or <strong>undefined</strong>, then\n<ol>\n<li>Return <em>resolved</em>.</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>Otherwise, if <em>exports</em> is an Object and all keys of <em>exports</em> start with\n<em>\".\"</em>, then\n<ol>\n<li>Let <em>matchKey</em> be the string <em>\"./\"</em> concatenated with <em>subpath</em>.</li>\n<li>Let <em>resolvedMatch</em> be result of <strong>PACKAGE_IMPORTS_EXPORTS_RESOLVE</strong>(\n<em>matchKey</em>, <em>exports</em>, <em>packageURL</em>, <strong>false</strong>, <em>conditions</em>).</li>\n<li>If <em>resolvedMatch</em>.<em>resolve</em> is not <strong>null</strong> or <strong>undefined</strong>, then\n<ol>\n<li>Return <em>resolvedMatch</em>.</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>Throw a <em>Package Path Not Exported</em> error.</li>\n</ol>\n</blockquote>\n<p><strong>PACKAGE_IMPORTS_RESOLVE</strong>(<em>specifier</em>, <em>parentURL</em>, <em>conditions</em>)</p>\n<blockquote>\n<ol>\n<li>Assert: <em>specifier</em> begins with <em>\"#\"</em>.</li>\n<li>If <em>specifier</em> is exactly equal to <em>\"#\"</em> or starts with <em>\"#/\"</em>, then\n<ol>\n<li>Throw an <em>Invalid Module Specifier</em> error.</li>\n</ol>\n</li>\n<li>Let <em>packageURL</em> be the result of <strong>READ_PACKAGE_SCOPE</strong>(<em>parentURL</em>).</li>\n<li>If <em>packageURL</em> is not <strong>null</strong>, then\n<ol>\n<li>Let <em>pjson</em> be the result of <strong>READ_PACKAGE_JSON</strong>(<em>packageURL</em>).</li>\n<li>If <em>pjson.imports</em> is a non-null Object, then\n<ol>\n<li>Let <em>resolvedMatch</em> be the result of\n<strong>PACKAGE_IMPORTS_EXPORTS_RESOLVE</strong>(<em>specifier</em>, <em>pjson.imports</em>,\n<em>packageURL</em>, <strong>true</strong>, <em>conditions</em>).</li>\n<li>If <em>resolvedMatch</em>.<em>resolve</em> is not <strong>null</strong> or <strong>undefined</strong>, then\n<ol>\n<li>Return <em>resolvedMatch</em>.</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>Throw a <em>Package Import Not Defined</em> error.</li>\n</ol>\n</blockquote>\n<p><strong>PACKAGE_IMPORTS_EXPORTS_RESOLVE</strong>(<em>matchKey</em>, <em>matchObj</em>, <em>packageURL</em>,\n<em>isImports</em>, <em>conditions</em>)</p>\n<blockquote>\n<ol>\n<li>If <em>matchKey</em> is a key of <em>matchObj</em> and does not end in <em>\"/\"</em> or contain\n<em>\"*\"</em>, then\n<ol>\n<li>Let <em>target</em> be the value of <em>matchObj</em>[<em>matchKey</em>].</li>\n<li>Let <em>resolved</em> be the result of <strong>PACKAGE_TARGET_RESOLVE</strong>(\n<em>packageURL</em>, <em>target</em>, <em>\"\"</em>, <strong>false</strong>, <em>isImports</em>, <em>conditions</em>).</li>\n<li>Return the object <em>{ resolved, exact: <strong>true</strong> }</em>.</li>\n</ol>\n</li>\n<li>Let <em>expansionKeys</em> be the list of keys of <em>matchObj</em> either ending in\n<em>\"/\"</em> or containing only a single <em>\"*\"</em>, sorted by the sorting function\n<strong>PATTERN_KEY_COMPARE</strong> which orders in descending order of specificity.</li>\n<li>For each key <em>expansionKey</em> in <em>expansionKeys</em>, do\n<ol>\n<li>Let <em>patternBase</em> be <strong>null</strong>.</li>\n<li>If <em>expansionKey</em> contains <em>\"*\"</em>, set <em>patternBase</em> to the substring of\n<em>expansionKey</em> up to but excluding the first <em>\"*\"</em> character.</li>\n<li>If <em>patternBase</em> is not <strong>null</strong> and <em>matchKey</em> starts with but is not\nequal to <em>patternBase</em>, then\n<ol>\n<li>Let <em>patternTrailer</em> be the substring of <em>expansionKey</em> from the\nindex after the first <em>\"*\"</em> character.</li>\n<li>If <em>patternTrailer</em> has zero length, or if <em>matchKey</em> ends with\n<em>patternTrailer</em> and the length of <em>matchKey</em> is greater than or\nequal to the length of <em>expansionKey</em>, then\n<ol>\n<li>Let <em>target</em> be the value of <em>matchObj</em>[<em>expansionKey</em>].</li>\n<li>Let <em>subpath</em> be the substring of <em>matchKey</em> starting at the\nindex of the length of <em>patternBase</em> up to the length of\n<em>matchKey</em> minus the length of <em>patternTrailer</em>.</li>\n<li>Let <em>resolved</em> be the result of <strong>PACKAGE_TARGET_RESOLVE</strong>(\n<em>packageURL</em>, <em>target</em>, <em>subpath</em>, <strong>true</strong>, <em>isImports</em>,\n<em>conditions</em>).</li>\n<li>Return the object <em>{ resolved, exact: <strong>true</strong> }</em>.</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>Otherwise if <em>patternBase</em> is <strong>null</strong> and <em>matchKey</em> starts with\n<em>expansionKey</em>, then\n<ol>\n<li>Let <em>target</em> be the value of <em>matchObj</em>[<em>expansionKey</em>].</li>\n<li>Let <em>subpath</em> be the substring of <em>matchKey</em> starting at the\nindex of the length of <em>expansionKey</em>.</li>\n<li>Let <em>resolved</em> be the result of <strong>PACKAGE_TARGET_RESOLVE</strong>(\n<em>packageURL</em>, <em>target</em>, <em>subpath</em>, <strong>false</strong>, <em>isImports</em>,\n<em>conditions</em>).</li>\n<li>Return the object <em>{ resolved, exact: <strong>false</strong> }</em>.</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>Return the object <em>{ resolved: <strong>null</strong>, exact: <strong>true</strong> }</em>.</li>\n</ol>\n</blockquote>\n<p><strong>PATTERN_KEY_COMPARE</strong>(<em>keyA</em>, <em>keyB</em>)</p>\n<blockquote>\n<ol>\n<li>Assert: <em>keyA</em> ends with <em>\"/\"</em> or contains only a single <em>\"*\"</em>.</li>\n<li>Assert: <em>keyB</em> ends with <em>\"/\"</em> or contains only a single <em>\"*\"</em>.</li>\n<li>Let <em>baseLengthA</em> be the index of <em>\"*\"</em> in <em>keyA</em> plus one, if <em>keyA</em>\ncontains <em>\"*\"</em>, or the length of <em>keyA</em> otherwise.</li>\n<li>Let <em>baseLengthB</em> be the index of <em>\"*\"</em> in <em>keyB</em> plus one, if <em>keyB</em>\ncontains <em>\"*\"</em>, or the length of <em>keyB</em> otherwise.</li>\n<li>If <em>baseLengthA</em> is greater than <em>baseLengthB</em>, return -1.</li>\n<li>If <em>baseLengthB</em> is greater than <em>baseLengthA</em>, return 1.</li>\n<li>If <em>keyA</em> does not contain <em>\"*\"</em>, return 1.</li>\n<li>If <em>keyB</em> does not contain <em>\"*\"</em>, return -1.</li>\n<li>If the length of <em>keyA</em> is greater than the length of <em>keyB</em>, return -1.</li>\n<li>If the length of <em>keyB</em> is greater than the length of <em>keyA</em>, return 1.</li>\n<li>Return 0.</li>\n</ol>\n</blockquote>\n<p><strong>PACKAGE_TARGET_RESOLVE</strong>(<em>packageURL</em>, <em>target</em>, <em>subpath</em>, <em>pattern</em>,\n<em>internal</em>, <em>conditions</em>)</p>\n<blockquote>\n<ol>\n<li>If <em>target</em> is a String, then\n<ol>\n<li>If <em>pattern</em> is <strong>false</strong>, <em>subpath</em> has non-zero length and <em>target</em>\ndoes not end with <em>\"/\"</em>, throw an <em>Invalid Module Specifier</em> error.</li>\n<li>If <em>target</em> does not start with <em>\"./\"</em>, then\n<ol>\n<li>If <em>internal</em> is <strong>true</strong> and <em>target</em> does not start with <em>\"../\"</em> or\n<em>\"/\"</em> and is not a valid URL, then\n<ol>\n<li>If <em>pattern</em> is <strong>true</strong>, then\n<ol>\n<li>Return <strong>PACKAGE_RESOLVE</strong>(<em>target</em> with every instance of\n<em>\"*\"</em> replaced by <em>subpath</em>, <em>packageURL</em> + <em>\"/\"</em>)_.</li>\n</ol>\n</li>\n<li>Return <strong>PACKAGE_RESOLVE</strong>(<em>target</em> + <em>subpath</em>,\n<em>packageURL</em> + <em>\"/\"</em>)_.</li>\n</ol>\n</li>\n<li>Otherwise, throw an <em>Invalid Package Target</em> error.</li>\n</ol>\n</li>\n<li>If <em>target</em> split on <em>\"/\"</em> or <em>\"\\\"</em> contains any <em>\".\"</em>, <em>\"..\"</em> or\n<em>\"node_modules\"</em> segments after the first segment, throw an\n<em>Invalid Package Target</em> error.</li>\n<li>Let <em>resolvedTarget</em> be the URL resolution of the concatenation of\n<em>packageURL</em> and <em>target</em>.</li>\n<li>Assert: <em>resolvedTarget</em> is contained in <em>packageURL</em>.</li>\n<li>If <em>subpath</em> split on <em>\"/\"</em> or <em>\"\\\"</em> contains any <em>\".\"</em>, <em>\"..\"</em> or\n<em>\"node_modules\"</em> segments, throw an <em>Invalid Module Specifier</em> error.</li>\n<li>If <em>pattern</em> is <strong>true</strong>, then\n<ol>\n<li>Return the URL resolution of <em>resolvedTarget</em> with every instance of\n<em>\"*\"</em> replaced with <em>subpath</em>.</li>\n</ol>\n</li>\n<li>Otherwise,\n<ol>\n<li>Return the URL resolution of the concatenation of <em>subpath</em> and\n<em>resolvedTarget</em>.</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>Otherwise, if <em>target</em> is a non-null Object, then\n<ol>\n<li>If <em>exports</em> contains any index property keys, as defined in ECMA-262\n<a href=\"https://tc39.es/ecma262/#integer-index\">6.1.7 Array Index</a>, throw an <em>Invalid Package Configuration</em> error.</li>\n<li>For each property <em>p</em> of <em>target</em>, in object insertion order as,\n<ol>\n<li>If <em>p</em> equals <em>\"default\"</em> or <em>conditions</em> contains an entry for <em>p</em>,\nthen\n<ol>\n<li>Let <em>targetValue</em> be the value of the <em>p</em> property in <em>target</em>.</li>\n<li>Let <em>resolved</em> be the result of <strong>PACKAGE_TARGET_RESOLVE</strong>(\n<em>packageURL</em>, <em>targetValue</em>, <em>subpath</em>, <em>pattern</em>, <em>internal</em>,\n<em>conditions</em>).</li>\n<li>If <em>resolved</em> is equal to <strong>undefined</strong>, continue the loop.</li>\n<li>Return <em>resolved</em>.</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>Return <strong>undefined</strong>.</li>\n</ol>\n</li>\n<li>Otherwise, if <em>target</em> is an Array, then\n<ol>\n<li>If _target.length is zero, return <strong>null</strong>.</li>\n<li>For each item <em>targetValue</em> in <em>target</em>, do\n<ol>\n<li>Let <em>resolved</em> be the result of <strong>PACKAGE_TARGET_RESOLVE</strong>(\n<em>packageURL</em>, <em>targetValue</em>, <em>subpath</em>, <em>pattern</em>, <em>internal</em>,\n<em>conditions</em>), continuing the loop on any <em>Invalid Package Target</em>\nerror.</li>\n<li>If <em>resolved</em> is <strong>undefined</strong>, continue the loop.</li>\n<li>Return <em>resolved</em>.</li>\n</ol>\n</li>\n<li>Return or throw the last fallback resolution <strong>null</strong> return or error.</li>\n</ol>\n</li>\n<li>Otherwise, if <em>target</em> is <em>null</em>, return <strong>null</strong>.</li>\n<li>Otherwise throw an <em>Invalid Package Target</em> error.</li>\n</ol>\n</blockquote>\n<p><strong>ESM_FORMAT</strong>(<em>url</em>)</p>\n<blockquote>\n<ol>\n<li>Assert: <em>url</em> corresponds to an existing file.</li>\n<li>Let <em>pjson</em> be the result of <strong>READ_PACKAGE_SCOPE</strong>(<em>url</em>).</li>\n<li>If <em>url</em> ends in <em>\".mjs\"</em>, then\n<ol>\n<li>Return <em>\"module\"</em>.</li>\n</ol>\n</li>\n<li>If <em>url</em> ends in <em>\".cjs\"</em>, then\n<ol>\n<li>Return <em>\"commonjs\"</em>.</li>\n</ol>\n</li>\n<li>If <em>pjson?.type</em> exists and is <em>\"module\"</em>, then\n<ol>\n<li>If <em>url</em> ends in <em>\".js\"</em>, then\n<ol>\n<li>Return <em>\"module\"</em>.</li>\n</ol>\n</li>\n<li>Throw an <em>Unsupported File Extension</em> error.</li>\n</ol>\n</li>\n<li>Otherwise,\n<ol>\n<li>Throw an <em>Unsupported File Extension</em> error.</li>\n</ol>\n</li>\n</ol>\n</blockquote>\n<p><strong>READ_PACKAGE_SCOPE</strong>(<em>url</em>)</p>\n<blockquote>\n<ol>\n<li>Let <em>scopeURL</em> be <em>url</em>.</li>\n<li>While <em>scopeURL</em> is not the file system root,\n<ol>\n<li>Set <em>scopeURL</em> to the parent URL of <em>scopeURL</em>.</li>\n<li>If <em>scopeURL</em> ends in a <em>\"node_modules\"</em> path segment, return <strong>null</strong>.</li>\n<li>Let <em>pjson</em> be the result of <strong>READ_PACKAGE_JSON</strong>(<em>scopeURL</em>).</li>\n<li>If <em>pjson</em> is not <strong>null</strong>, then\n<ol>\n<li>Return <em>pjson</em>.</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>Return <strong>null</strong>.</li>\n</ol>\n</blockquote>\n<p><strong>READ_PACKAGE_JSON</strong>(<em>packageURL</em>)</p>\n<blockquote>\n<ol>\n<li>Let <em>pjsonURL</em> be the resolution of <em>\"package.json\"</em> within <em>packageURL</em>.</li>\n<li>If the file at <em>pjsonURL</em> does not exist, then\n<ol>\n<li>Return <strong>null</strong>.</li>\n</ol>\n</li>\n<li>If the file at <em>packageURL</em> does not parse as valid JSON, then\n<ol>\n<li>Throw an <em>Invalid Package Configuration</em> error.</li>\n</ol>\n</li>\n<li>Return the parsed JSON source of the file at <em>pjsonURL</em>.</li>\n</ol>\n</blockquote>",
              "type": "module",
              "displayName": "Resolver Algorithm Specification"
            },
            {
              "textRaw": "Customizing ESM specifier resolution algorithm",
              "name": "customizing_esm_specifier_resolution_algorithm",
              "stability": 1,
              "stabilityText": "Experimental",
              "desc": "<p>The current specifier resolution does not support all default behavior of\nthe CommonJS loader. One of the behavior differences is automatic resolution\nof file extensions and the ability to import directories that have an index\nfile.</p>\n<p>The <code>--experimental-specifier-resolution=[mode]</code> flag can be used to customize\nthe extension resolution algorithm. The default mode is <code>explicit</code>, which\nrequires the full path to a module be provided to the loader. To enable the\nautomatic extension resolution and importing from directories that include an\nindex file use the <code>node</code> mode.</p>\n<pre><code class=\"language-console\">$ node index.mjs\nsuccess!\n$ node index # Failure!\nError: Cannot find module\n$ node --experimental-specifier-resolution=node index\nsuccess!\n</code></pre>\n<!-- Note: The cjs-module-lexer link should be kept in-sync with the deps version -->",
              "type": "module",
              "displayName": "Customizing ESM specifier resolution algorithm"
            }
          ],
          "type": "misc",
          "displayName": "Resolution algorithm"
        }
      ],
      "properties": [
        {
          "textRaw": "`meta` {Object}",
          "type": "Object",
          "name": "meta",
          "desc": "<p>The <code>import.meta</code> meta property is an <code>Object</code> that contains the following\nproperties.</p>",
          "properties": [
            {
              "textRaw": "`url` {string} The absolute `file:` URL of the module.",
              "type": "string",
              "name": "url",
              "desc": "<p>This is defined exactly the same as it is in browsers providing the URL of the\ncurrent module file.</p>\n<p>This enables useful patterns such as relative file loading:</p>\n<pre><code class=\"language-js\">import { readFileSync } from 'fs';\nconst buffer = readFileSync(new URL('./data.proto', import.meta.url));\n</code></pre>",
              "shortDesc": "The absolute `file:` URL of the module."
            }
          ],
          "methods": [
            {
              "textRaw": "`import.meta.resolve(specifier[, parent])`",
              "type": "method",
              "name": "resolve",
              "signatures": [
                {
                  "params": []
                }
              ],
              "desc": "<!--\nadded:\n  - v13.9.0\n  - v12.16.2\nchanges:\n  - version: v14.18.0\n    pr-url: https://github.com/nodejs/node/pull/38587\n    description: Add support for WHATWG `URL` object to `parentURL` parameter.\n-->\n<blockquote>\n<p>Stability: 1 - Experimental</p>\n</blockquote>\n<p>This feature is only available with the <code>--experimental-import-meta-resolve</code>\ncommand flag enabled.</p>\n<ul>\n<li><code>specifier</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The module specifier to resolve relative to <code>parent</code>.</li>\n<li><code>parent</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\" class=\"type\">&lt;string&gt;</a> The absolute parent module URL to resolve from. If none\nis specified, the value of <code>import.meta.url</code> is used as the default.</li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" class=\"type\">&lt;Promise&gt;</a></li>\n</ul>\n<p>Provides a module-relative resolution function scoped to each module, returning\nthe URL string.</p>\n<!-- eslint-skip -->\n<pre><code class=\"language-js\">const dependencyAsset = await import.meta.resolve('component-lib/asset.css');\n</code></pre>\n<p><code>import.meta.resolve</code> also accepts a second argument which is the parent module\nfrom which to resolve from:</p>\n<!-- eslint-skip -->\n<pre><code class=\"language-js\">await import.meta.resolve('./dep', import.meta.url);\n</code></pre>\n<p>This function is asynchronous because the ES module resolver in Node.js is\nallowed to be asynchronous.</p>"
            }
          ]
        }
      ]
    }
  ]
}