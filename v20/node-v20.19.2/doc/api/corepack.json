{
  "type": "module",
  "source": "doc/api/corepack.md",
  "introduced_in": "v14.19.0",
  "meta": {
    "added": [
      "v16.9.0",
      "v14.19.0"
    ],
    "changes": []
  },
  "stability": 1,
  "stabilityText": "Experimental",
  "miscs": [
    {
      "textRaw": "Corepack",
      "name": "Corepack",
      "introduced_in": "v14.19.0",
      "type": "misc",
      "meta": {
        "added": [
          "v16.9.0",
          "v14.19.0"
        ],
        "changes": []
      },
      "stability": 1,
      "stabilityText": "Experimental",
      "desc": "<p><em><a href=\"https://github.com/nodejs/corepack\">Corepack</a></em> is an experimental tool to help with\nmanaging versions of your package managers. It exposes binary proxies for\neach <a href=\"#supported-package-managers\">supported package manager</a> that, when called, will identify whatever\npackage manager is configured for the current project, download it if needed,\nand finally run it.</p>\n<p>Despite Corepack being distributed with default installs of Node.js, the package\nmanagers managed by Corepack are not part of the Node.js distribution and:</p>\n<ul>\n<li>Upon first use, Corepack downloads the latest version from the network.</li>\n<li>Any required updates (related to security vulnerabilities or otherwise) are\nout of scope of the Node.js project. If necessary end users must figure out\nhow to update on their own.</li>\n</ul>\n<p>This feature simplifies two core workflows:</p>\n<ul>\n<li>\n<p>It eases new contributor onboarding, since they won't have to follow\nsystem-specific installation processes anymore just to have the package\nmanager you want them to.</p>\n</li>\n<li>\n<p>It allows you to ensure that everyone in your team will use exactly the\npackage manager version you intend them to, without them having to\nmanually synchronize it each time you need to make an update.</p>\n</li>\n</ul>",
      "miscs": [
        {
          "textRaw": "Workflows",
          "name": "workflows",
          "modules": [
            {
              "textRaw": "Enabling the feature",
              "name": "enabling_the_feature",
              "desc": "<p>Due to its experimental status, Corepack currently needs to be explicitly\nenabled to have any effect. To do that, run <a href=\"https://github.com/nodejs/corepack#corepack-enable--name\"><code>corepack enable</code></a>, which\nwill set up the symlinks in your environment next to the <code>node</code> binary\n(and overwrite the existing symlinks if necessary).</p>\n<p>From this point forward, any call to the <a href=\"#supported-package-managers\">supported binaries</a> will work\nwithout further setup. Should you experience a problem, run\n<a href=\"https://github.com/nodejs/corepack#corepack-disable--name\"><code>corepack disable</code></a> to remove the proxies from your system (and consider\nopening an issue on the <a href=\"https://github.com/nodejs/corepack\">Corepack repository</a> to let us know).</p>",
              "type": "module",
              "displayName": "Enabling the feature"
            },
            {
              "textRaw": "Configuring a package",
              "name": "configuring_a_package",
              "desc": "<p>The Corepack proxies will find the closest <a href=\"packages.html#nodejs-packagejson-field-definitions\"><code>package.json</code></a> file in your\ncurrent directory hierarchy to extract its <a href=\"packages.html#packagemanager\"><code>\"packageManager\"</code></a> property.</p>\n<p>If the value corresponds to a <a href=\"#supported-package-managers\">supported package manager</a>, Corepack will make\nsure that all calls to the relevant binaries are run against the requested\nversion, downloading it on demand if needed, and aborting if it cannot be\nsuccessfully retrieved.</p>\n<p>You can use <a href=\"https://github.com/nodejs/corepack#corepack-use-nameversion\"><code>corepack use</code></a> to ask Corepack to update your local\n<code>package.json</code> to use the package manager of your choice:</p>\n<pre><code class=\"language-bash\">corepack use pnpm@7.x # sets the latest 7.x version in the package.json\ncorepack use yarn@* # sets the latest version in the package.json\n</code></pre>",
              "type": "module",
              "displayName": "Configuring a package"
            },
            {
              "textRaw": "Upgrading the global versions",
              "name": "upgrading_the_global_versions",
              "desc": "<p>When running outside of an existing project (for example when running\n<code>yarn init</code>), Corepack will by default use predefined versions roughly\ncorresponding to the latest stable releases from each tool. Those versions can\nbe overridden by running the <a href=\"https://github.com/nodejs/corepack#corepack-install--g--global---all--nameversion\"><code>corepack install</code></a> command along with the\npackage manager version you wish to set:</p>\n<pre><code class=\"language-bash\">corepack install --global yarn@x.y.z\n</code></pre>\n<p>Alternately, a tag or range may be used:</p>\n<pre><code class=\"language-bash\">corepack install --global pnpm@*\ncorepack install --global yarn@stable\n</code></pre>",
              "type": "module",
              "displayName": "Upgrading the global versions"
            },
            {
              "textRaw": "Offline workflow",
              "name": "offline_workflow",
              "desc": "<p>Many production environments don't have network access. Since Corepack\nusually downloads the package manager releases straight from their registries,\nit can conflict with such environments. To avoid that happening, call the\n<a href=\"https://github.com/nodejs/corepack#corepack-pack---all--nameversion\"><code>corepack pack</code></a> command while you still have network access (typically at\nthe same time you're preparing your deploy image). This will ensure that the\nrequired package managers are available even without network access.</p>\n<p>The <code>pack</code> command has <a href=\"https://github.com/nodejs/corepack#utility-commands\">various flags</a>. Consult the detailed\n<a href=\"https://github.com/nodejs/corepack#readme\">Corepack documentation</a> for more information.</p>",
              "type": "module",
              "displayName": "Offline workflow"
            }
          ],
          "type": "misc",
          "displayName": "Workflows"
        },
        {
          "textRaw": "Supported package managers",
          "name": "supported_package_managers",
          "desc": "<p>The following binaries are provided through Corepack:</p>\n<table>\n<thead>\n<tr>\n<th>Package manager</th>\n<th>Binary names</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://yarnpkg.com\">Yarn</a></td>\n<td><code>yarn</code>, <code>yarnpkg</code></td>\n</tr>\n<tr>\n<td><a href=\"https://pnpm.io\">pnpm</a></td>\n<td><code>pnpm</code>, <code>pnpx</code></td>\n</tr>\n</tbody>\n</table>",
          "type": "misc",
          "displayName": "Supported package managers"
        },
        {
          "textRaw": "Common questions",
          "name": "common_questions",
          "modules": [
            {
              "textRaw": "How does Corepack interact with npm?",
              "name": "how_does_corepack_interact_with_npm?",
              "desc": "<p>While Corepack could support npm like any other package manager, its\nshims aren't enabled by default. This has a few consequences:</p>\n<ul>\n<li>\n<p>It's always possible to run a <code>npm</code> command within a project configured to\nbe used with another package manager, since Corepack cannot intercept it.</p>\n</li>\n<li>\n<p>While <code>npm</code> is a valid option in the <a href=\"packages.html#packagemanager\"><code>\"packageManager\"</code></a> property, the\nlack of shim will cause the global npm to be used.</p>\n</li>\n</ul>",
              "type": "module",
              "displayName": "How does Corepack interact with npm?"
            },
            {
              "textRaw": "Running `npm install -g yarn` doesn't work",
              "name": "running_`npm_install_-g_yarn`_doesn't_work",
              "desc": "<p>npm prevents accidentally overriding the Corepack binaries when doing a global\ninstall. To avoid this problem, consider one of the following options:</p>\n<ul>\n<li>\n<p>Don't run this command; Corepack will provide the package manager\nbinaries anyway and will ensure that the requested versions are always\navailable, so installing the package managers explicitly isn't needed.</p>\n</li>\n<li>\n<p>Add the <code>--force</code> flag to <code>npm install</code>; this will tell npm that it's fine to\noverride binaries, but you'll erase the Corepack ones in the process. (Run\n<a href=\"https://github.com/nodejs/corepack#corepack-enable--name\"><code>corepack enable</code></a> to add them back.)</p>\n</li>\n</ul>",
              "type": "module",
              "displayName": "Running `npm install -g yarn` doesn't work"
            }
          ],
          "type": "misc",
          "displayName": "Common questions"
        }
      ]
    }
  ]
}